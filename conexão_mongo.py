# -*- coding: utf-8 -*-
"""conexão mongo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yw3__B8jamUero1dxAePOAFIcilSdBpF
"""

pip install pymongo

import pandas as pd
import json
from pymongo import MongoClient
import certifi

# Sua string de conexão com o MongoDB
# O `certifi.where()` é usado para garantir a conexão SSL/TLS
MONGO_URI = "mongodb+srv://senac:senac@pokedex.n18knsm.mongodb.net/?retryWrites=true&w=majority&appName=Pokedex"

# Carregar o arquivo JSON
try:
    with open("pokedex (3).json", "r", encoding='utf-8') as f:
        data = json.load(f)
except FileNotFoundError:
    print("Erro: O arquivo 'pokedex (2).json' não foi encontrado.")
    exit()

# Criar o DataFrame
df = pd.DataFrame(data)

# Renomear colunas
df.rename(columns={'id': 'numero_pokemon', 'name': 'nome_pokemon', 'evolucoes': 'evolucoes_data', 'tamanho': 'altura_cm', 'peso': 'peso_kg'}, inplace=True)

# Adicionar uma coluna com um ID
df.insert(0, 'id_pokemon', range(1, len(df) + 1))

# Remover duplicatas com base no número nacional do Pokémon
df.drop_duplicates(subset=['numero_pokemon'], keep='first', inplace=True)

# Corrigir a duplicação na lista
df['tipo'] = df['tipo'].apply(lambda x: list(set(x)) if isinstance(x, list) else x)

# Corrigir a duplicação na lista de evoluções
def remover_evolucoes_duplicadas(lista_evolucoes):
    if not isinstance(lista_evolucoes, list):
        return lista_evolucoes

    seen = set()
    evolucoes_sem_duplicatas = []

    for evo in lista_evolucoes:
        evo_tuple = tuple(sorted(evo.items()))
        if evo_tuple not in seen:
            seen.add(evo_tuple)
            evolucoes_sem_duplicatas.append(evo)

    return evolucoes_sem_duplicatas

df['evolucoes_data'] = df['evolucoes_data'].apply(remover_evolucoes_duplicadas)

# Lidar com o caso especial da relação de evolução
for index, row in df.iterrows():
    if row['evolucoes_data']:
        evolucoes_list = []
        for evo in row['evolucoes_data']:
            if evo['numero'] and len(evo['numero']) > 1 and int(row['numero_pokemon']) > int(evo['numero'][1:]):
                continue
            if evo['nome'] == row['nome_pokemon']:
                continue
            evolucoes_list.append(evo)
        df.at[index, 'evolucoes_data'] = evolucoes_list

# Otimização: Reorganizar o DataFrame
df.reset_index(drop=True, inplace=True)

# Converter o DataFrame para uma lista de dicionários
data_to_save = df.to_dict(orient='records')

# Conectar e inserir no MongoDB
client = None
try:
    print("Conectando ao MongoDB...")
    client = MongoClient(MONGO_URI, tlsCAFile=certifi.where())
    db = client.Pokedex
    collection = db.pokemons

    # Limpa a coleção antes de inserir para evitar duplicatas
    collection.delete_many({})

    # Insere todos os documentos de uma vez
    collection.insert_many(data_to_save)

    print(f"Sucesso! {len(data_to_save)} documentos foram inseridos na coleção 'pokemons'.")

except Exception as e:
    print(f"Erro ao conectar ou inserir no MongoDB: {e}")

finally:
    if client:
        client.close()
        print("Conexão com o MongoDB fechada.")