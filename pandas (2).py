# -*- coding: utf-8 -*-
"""pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18et9tKRVJ6q6D2jSdnu-6l04WJOFcLCH
"""

pip install pymongo

import pandas as pd
import json

# Carregar o arquivo JSON
with open("pokedex (3).json", "r", encoding='utf-8') as f:
    data = json.load(f)

# Criar o DataFrame com os dados limpos
df = pd.DataFrame(data)

# Renomear colunas para maior clareza e consistência
df.rename(columns={'id': 'numero_pokemon', 'name': 'nome_pokemon', 'evolucoes': 'evolucoes_data', 'tamanho': 'altura_cm', 'peso': 'peso_kg'}, inplace=True)

# Adicionar uma coluna com um ID sequencial para cada Pokémon
df.insert(0, 'id_pokemon', range(1, len(df) + 1))

# Remover duplicatas com base no número nacional do Pokémon
df.drop_duplicates(subset=['numero_pokemon'], keep='first', inplace=True)

# --- INÍCIO DA MUDANÇA ---
# Corrigir a duplicação na lista de tipos usando um conjunto
df['tipo'] = df['tipo'].apply(lambda x: list(set(x)) if isinstance(x, list) else x)
# --- FIM DA MUDANÇA ---

# Lidar com o caso especial da relação de evolução (Vaporeon evoluindo para Eevee)
for index, row in df.iterrows():
    if row['evolucoes_data']:
        evolucoes_list = []
        for evo in row['evolucoes_data']:
            if evo['numero'] and len(evo['numero']) > 1 and int(row['numero_pokemon']) > int(evo['numero'][1:]):
                continue
            if evo['nome'] == row['nome_pokemon']:
                continue
            evolucoes_list.append(evo)
        df.at[index, 'evolucoes_data'] = evolucoes_list

# Otimização: Reorganizar o DataFrame para garantir que os índices sejam contínuos após as remoções
df.reset_index(drop=True, inplace=True)

# Converter o DataFrame para uma lista de dicionários
data_to_save = df.to_dict(orient='records')

# Salvar o arquivo usando a biblioteca 'json' nativa do Python
with open("pokemons_final_completo.json", "w", encoding='utf-8') as f:
    json.dump(data_to_save, f, indent=2, ensure_ascii=False)

print("Processamento concluído. O arquivo 'pokemons_final_completo.json' foi criado.")

# Exibir os 5 primeiros Pokémon para verificar
print(df[['id_pokemon', 'numero_pokemon', 'nome_pokemon', 'tipo']].head())

import pandas as pd

# Dados para a tabela de Pokémon, peso e altura
dados_pokemon_basico = {
    'id_pokemon': [1, 4, 7, 25, 150],
    'nome': ['Bulbasaur', 'Charmander', 'Squirtle', 'Pikachu', 'Mewtwo'],
    'peso_kg': [6.9, 8.5, 9.0, 6.0, 122.0],
    'altura_m': [0.7, 0.6, 0.5, 0.4, 2.0]
}

# Criação do DataFrame
df_pokemon_basico = pd.DataFrame(dados_pokemon_basico)

# Exibição da tabela
print("--- Tabela de Pokémon, Peso e Altura ---")
print(df_pokemon_basico)

import pandas as pd

# Dados para a tabela de efetividade
dados_efetividade = {
    'id_pokemon': [1, 4, 7, 25, 150],
    'nome': ['Bulbasaur', 'Charmander', 'Squirtle', 'Pikachu', 'Mewtwo'],
    'tipo_ataque': ['Planta', 'Fogo', 'Água', 'Elétrico', 'Psíquico'],
    'super_eficaz_contra': ['Água, Pedra, Terrestre', 'Planta, Gelo, Inseto', 'Fogo, Terrestre, Pedra', 'Água, Voador', 'Lutador, Venenoso'],
    'ineficaz_contra': ['Fogo, Psíquico, Voador', 'Água, Pedra, Dragão', 'Planta, Elétrico', 'Terrestre, Elétrico', 'Psíquico, Aço']
}

# Criação do DataFrame
df_efetividade = pd.DataFrame(dados_efetividade)

# Exibição da tabela
print("\n--- Tabela de Efetividade do Pokémon ---")
print(df_efetividade)

import pandas as pd
import json

# Carrega o arquivo JSON em uma variável Python
with open('pokemons_final_completo.json', 'r') as f:
    dados_pokemon = json.load(f)

# Cria listas para armazenar os dados de cada coluna
ids = []
pesos = []
alturas = []

# Itera sobre cada Pokémon nos dados
for pokemon in dados_pokemon:
    ids.append(pokemon.get('id_pokemon'))
    pesos.append(pokemon.get('peso_kg'))
    alturas.append(pokemon.get('altura_cm'))

# Cria um dicionário para o DataFrame
dados_tabela_1 = {
    'id_pokemon': ids,
    'peso_kg': pesos,
    'altura_cm': alturas
}

# Cria o DataFrame e exibe a tabela
df_pokemon_basico = pd.DataFrame(dados_tabela_1)

print("--- Tabela com ID, Peso e Altura ---")
print(df_pokemon_basico)

import pandas as pd
import json

# Carrega o arquivo JSON
with open('pokemons_final_completo.json', 'r') as f:
    dados_pokemon = json.load(f)

# Prepara listas para o DataFrame de efetividade, agora com o nome do Pokémon
ids_efetividade = []
nomes_efetividade = []
efetividade_dados = []

# Itera sobre cada Pokémon
for pokemon in dados_pokemon:
    id_pokemon = pokemon.get('id_pokemon')
    nome_pokemon = pokemon.get('nome_pokemon')  # Extrai o nome do Pokémon
    efetividade = pokemon.get('efetividade', {})

    # Se houver dados de efetividade, os adiciona à lista
    if efetividade:
        efetividade['id_pokemon'] = id_pokemon  # Adiciona o ID como uma chave
        efetividade['nome_pokemon'] = nome_pokemon # Adiciona o nome como uma nova chave
        efetividade_dados.append(efetividade)

# Cria o DataFrame a partir dos dados extraídos
df_efetividade = pd.DataFrame(efetividade_dados)

# Exibe a tabela
print("--- Tabela com ID, Nome e Efetividade ---")
print(df_efetividade)